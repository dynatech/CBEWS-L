import React, { useState, useRef, useEffect } from 'react';
import { View, Text, Modal, ScrollView, TouchableOpacity, ToastAndroid, Alert } from 'react-native';
import { DataTable } from 'react-native-paper';
import { ContainerStyle } from '../../../styles/container_style';
import { LabelStyle } from '../../../styles/label_style';
import { ButtonStyle } from '../../../styles/button_style';
import { MarCommunityRiskAssessment } from '@dynaslope/commons';
import Forms from '../../utils/Forms';
import MobileCaching from '../../../utils/MobileCaching';
import NetworkUtils from '../../../utils/NetworkUtils';

function CapacityAndVulnerability() {

    const [openModal, setOpenModal] = useState(false);
    const [capacityAndVulnerability, setCapacityAndVulnerability] = useState([]);
    const [dataTableContent, setDataTableContent] = useState([]);
    const [selectedData, setSelectedData] = useState({});
    const [cmd, setCmd] = useState('add');
    const [defaultStrValues, setDefaultStrValues] = useState({
        'Resource': '',
        'Quantity': '',
        'Status': '',
        'Owner': '',
        'In charge': '',
        'Updater': '',
        'Datetime': ''
    });

    let formData = useRef();

    useEffect(() => {
        setTimeout( async ()=> {
            const isConnected = await NetworkUtils.isNetworkAvailable()
            if (isConnected != true) {
              Alert.alert(
                'CBEWS-L is not connected to the internet',
                'CBEWS-L Local data will be used.',
                [
                  { text: 'Ok', onPress: () => {
                    MobileCaching.getItem('MarCapacityAndVulnerability').then(response => {
                        init(response);
                    });
                  }, style: 'cancel' },
                ]
              )
            } else {
                fetchLatestData();
            }
          },100);
    }, [])

    const init = async (data) => {
            let temp = [];
            if (data.length != 0) {
                data.forEach(element => {
                    temp.push(
                        <DataTable.Row key={element.cav_id} onPress={() => { modifySummary(element) }}>
                            <DataTable.Cell>{element.resource}</DataTable.Cell>
                            <DataTable.Cell>{element.quantity}</DataTable.Cell>
                            <DataTable.Cell>{element.date}</DataTable.Cell>
                        </DataTable.Row>
                    )
                });
            } else {
                temp.push(
                    <View key={0}>
                        <Text>No available data.</Text>
                    </View>
                )
            }
            setDataTableContent(temp)
            setCapacityAndVulnerability(data);
    }

    const showForm = () => {
        setOpenModal(true);
    }

    const closeForm = () => {
        setOpenModal(false);
    }

    const fetchLatestData = async () => {
        let response = await MarCommunityRiskAssessment.GetAllCapacityAndVulnerability()
        init(response);
        MobileCaching.setItem('MarCapacityAndVulnerability', response);
    }
    const submitForm = async () => {
        let data = formData.current;
        if (!Object.keys(selectedData).length) {
            MobileCaching.getItem('user_credentials').then(credentials => {
                setTimeout(async () => {
                    const isConnected = await NetworkUtils.isNetworkAvailable();
                    let response = null;
                    if (isConnected != true) {
                        let temp = await MobileCaching.getItem("MarCapacityAndVulnerability").then(cached_data => {
                            cached_data.push({
                                'cav_id': 0,
                                'date': data['Datetime'],
                                'incharge': data['Incharge'],
                                'last_ts': null,
                                'owner': data['Owner'],
                                'quantity': data['Quantity'],
                                'resource': data['Resource'],
                                'stat_desc': data['Status'],
                                'updater': data['Updater'],
                                'user_id': credentials['user_id']
                            });
                            try {
                                MobileCaching.setItem("MarCapacityAndVulnerability", cached_data);
                                response = {
                                    "status": true,
                                    "message": "Capacity and Vulnerability is temporarily saved in the memory.\nPlease connect to the internet and sync your data."
                                }
                            } catch (err) {
                                response = {
                                    "status": false,
                                    "message": "Capacity and Vulnerability failed to save data to memory."
                                }
                            }
                            init(cached_data);
                            return response;
                        })
                    } else {
                        data['user_id'] = credentials['user_id']
                        response = await MarCommunityRiskAssessment.SubmitCapacityAndVulnerability(cmd,data)
                        fetchLatestData();
                    }
                    if (response.status == true) {
                        ToastAndroid.showWithGravity(response.message, ToastAndroid.LONG, ToastAndroid.CENTER)
                        closeForm();
                    } else {
                        ToastAndroid.showWithGravity(response.message, ToastAndroid.LONG, ToastAndroid.CENTER)
                    }
                }, 300);
            });
        } else {
            if (!Object.keys(selectedData).length) {
                ToastAndroid.showWithGravity('No changes has been made.', ToastAndroid.LONG, ToastAndroid.CENTER)
                closeForm();
            } else {
                MobileCaching.getItem('user_credentials').then(credentials => {
                    setTimeout(async () => {
                        let temp_array = []
                        Object.keys(data).forEach(key => {
                            let temp = {};
                            temp[key.replace(" ","_").toLocaleLowerCase()] = data[key]
                            temp_array.push(temp);
                        });
                        temp_array.push({'user_id': credentials['user_id']})
                        temp_array.push({'cav_id': selectedData['cav_id']})
                        let response = await MarCommunityRiskAssessment.SubmitCapacityAndVulnerability(cmd,temp_array)
                        if (response.status == true) {
                            ToastAndroid.showWithGravity(response.message, ToastAndroid.LONG, ToastAndroid.CENTER)
                            init();
                            closeForm();
                            setCmd('add');
                        } else {
                            ToastAndroid.showWithGravity(response.message, ToastAndroid.LONG, ToastAndroid.CENTER)
                        }
                    }, 300);
                });
            }
        }
    }

    const modifySummary = (data) => {
        setSelectedData(data)
        setDefaultStrValues({
            'Resource': data['resource'],
            'Quantity': `${data['quantity']}`,
            'Status': data['stat_desc'],
            'Owner': data['owner'],
            'In charge': data['in_charge'],
            'Updater': data['updater'],
            'Datetime': data['datetime']
        })
        setCmd('update')
        showForm();
    }

    const deleteForm = () => {
        Alert.alert(
            "Capacity and Vulnerability",
            "Are you sure you want to delete this data?",
            [
              {
                text: "Cancel",
                style: "cancel"
              },
              { text: "Confirm", onPress: () => {
                setTimeout(async ()=> {
                    let response = await MarCommunityRiskAssessment.DeleteCapacityAndVulnerability({
                        'cav_id': selectedData['cav_id']
                    })
                    if (response.status == true) {
                        ToastAndroid.showWithGravity(response.message, ToastAndroid.LONG, ToastAndroid.CENTER)
                        init();
                        closeForm();
                    } else {
                        ToastAndroid.showWithGravity(response.message, ToastAndroid.LONG, ToastAndroid.CENTER)
                    }
                },300)
              }}
            ],
            { cancelable: false }
        );
    }
    
    return (
        <ScrollView>
            <View style={ContainerStyle.content}>
                <Text style={[LabelStyle.large_label, LabelStyle.brand]}>Capacity and Vulenrability</Text>
                <Text style={[LabelStyle.small_label, LabelStyle.brand]}>Inventory logging / Resource checker</Text>
                <View style={ContainerStyle.datatable_content}>
                    <DataTable style={{ flex: 1, padding: 10 }}>
                        <DataTable.Header>
                            <DataTable.Title>Resource</DataTable.Title>
                            <DataTable.Title>Quantity</DataTable.Title>
                            <DataTable.Title>Date</DataTable.Title>
                        </DataTable.Header>
                        { dataTableContent }
                    </DataTable>
                    <DataTable.Pagination
                        page={1}
                        numberOfPages={3}
                        onPageChange={(page) => { console.log(page); }}
                        label="1-2 of 6"
                    />
                </View>
                <View>
                    <Text style={[LabelStyle.small_label, LabelStyle.brand]}>* Click row to modify.</Text>
                </View>
                <View style={{flex: 1, alignItems: 'center', padding: 10}}>
                    <TouchableOpacity style={ButtonStyle.medium} onPress={() => { showForm() }}>
                        <Text style={ButtonStyle.large_text}>Add +</Text>
                    </TouchableOpacity>
                </View>
            </View>
            <Modal animationType="slide"
                visible={openModal}
                onRequestClose={() => { 
                    setDefaultStrValues({
                        'Resource': '',
                        'Quantity': '',
                        'Status': '',
                        'Owner': '',
                        'In charge': '',
                        'Updater': '',
                        'Datetime': ''
                    })
                    setCmd('add');
                    setOpenModal(false);
                }}>
                <Forms data={{
                    string: defaultStrValues,
                    int: {}
                }}
                    formData={formData}
                    command={cmd}
                    closeForm={() => { closeForm() }}
                    submitForm={() => { submitForm() }}
                    deleteForm={() => { deleteForm() }} />
            </Modal>
        </ScrollView>
    )
}

export default CapacityAndVulnerability